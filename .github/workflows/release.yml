name: Release on Merge to Main

on:
  push:
    branches:
      - main  # Trigger when changes are pushed to the 'main' branch

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Explicitly grant write permissions

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Extract Version
      id: get_version
      run: |
        echo "VERSION=$(python -c 'from llamphouse import __version__; print(__version__)')" >> $GITHUB_ENV

    - name: Get Latest Git Tag
      id: get_latest_tag
      run: |
        git fetch --tags
        LATEST_TAG=$(git tag --sort=-v:refname | head -n 1 | sed 's/^v//')
        echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
        echo "Latest tag: ${LATEST_TAG}"

    - name: Compare Versions
      id: check_version
      run: |
        if [ -z "${{ env.LATEST_TAG }}" ]; then
          echo "No previous tag found, proceeding with release."
          echo "SHOULD_RELEASE=true" >> $GITHUB_ENV
        elif python -c "import sys; from packaging.version import parse as V; sys.exit(0 if V('${{ env.VERSION }}') > V('${{ env.LATEST_TAG }}') else 1)"; then
          echo "New version is greater, proceeding with release."
          echo "SHOULD_RELEASE=true" >> $GITHUB_ENV
        else
          echo "Version has not increased. Skipping release."
          echo "SHOULD_RELEASE=false" >> $GITHUB_ENV
        fi

    - name: Stop if Version Not Increased
      if: env.SHOULD_RELEASE == 'false'
      run: |
        echo "Skipping release as version has not increased."
        exit 0

    - name: Build the package
      run: |
        python -m build

    - name: Extract release notes
      id: extract-release-notes
      uses: ffurrer2/extract-release-notes@v2

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}
        release_name: "Release v${{ env.VERSION }}"
        body: "${{ steps.extract-release-notes.outputs.release_notes }}"
        draft: false
        prerelease: false

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: "__token__"
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/*
